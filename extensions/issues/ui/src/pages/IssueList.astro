---
import IssueList from '../components/IssueList.vue';

const env = import.meta.env as Record<string, string | undefined>;
const graphqlEndpoint = env.PUBLIC_FORGE_GRAPHQL_URL ?? 'http://localhost:8000/graphql';
let base = graphqlEndpoint.replace(/\/graphql$/, '');
try {
  const u = new URL(base);
  if (u.hostname === 'localhost') {
    u.hostname = '127.0.0.1';
    base = u.toString().replace(/\/$/, '');
  }
} catch {}
const sanitizedBase = base.endsWith('/') ? base.slice(0, -1) : base;
const authBase = env.PUBLIC_FORGE_AUTH_LOGIN_URL ?? `${sanitizedBase}/auth/login`;
function parseCookie(cookies: string, name: string): string | undefined {
  return cookies
    .split(';')
    .map((c) => c.trim())
    .find((c) => c.startsWith(name + '='))
    ?.slice(name.length + 1);
}
const rawIncoming = Astro.request.headers.get('cookie') ?? '';
const sessionId = (Astro.cookies?.get?.('forge_session')?.value as string | undefined) ?? parseCookie(rawIncoming, 'forge_session');
const headers = new Headers();
if (sessionId) {
  headers.set('Cookie', `forge_session=${sessionId}`);
} else if (rawIncoming) {
  headers.set('Cookie', rawIncoming);
}
let authenticated = false;
try {
  const res = await fetch(`${sanitizedBase}/auth/me`, { headers });
  if (res.ok) {
    const data = await res.json();
    authenticated = Boolean(data?.authenticated);
  }
} catch {}

const repoParam = (Astro.params as any).repo;
const repositoryPathFromParams = Array.isArray(repoParam)
	? repoParam.join('/')
	: typeof repoParam === 'string'
		? repoParam
		: undefined;

const repositoryId = Astro.url.searchParams.get('repositoryId') ?? undefined;
const repositoryPath = repositoryPathFromParams ?? Astro.url.searchParams.get('repositoryPath') ?? undefined;
const encodedRepositoryId = repositoryId ? encodeURIComponent(repositoryId) : undefined;
const encodedRepositoryPath = repositoryPath ? encodeURIComponent(repositoryPath) : undefined;

const showNewIssueButton = Boolean((repositoryId || repositoryPath) && authenticated);
const newIssueHref = (() => {
	if (repositoryPath) {
		const sanitized = repositoryPath.replace(/^\/+|\/+$/g, '');
		return `/${sanitized}/issues/new`;
	}

	if (encodedRepositoryId) {
		return `/issues/new?repositoryId=${encodedRepositoryId}`;
	}

	return '/issues/new';
})();
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width" />
		<title>Issues - Forge</title>
	</head>
<body class="min-h-screen bg-background text-foreground">
	<div class="mx-auto max-w-5xl px-4 py-8 space-y-6">
		<header class="flex items-center justify-between">
			<h1 class="text-3xl font-bold">Issues</h1>
			{showNewIssueButton && (
				<a
					href={newIssueHref}
					class="inline-flex items-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground shadow-sm transition hover:bg-primary/90"
				>
					New Issue
				</a>
			)}
		</header>
		<IssueList client:load repository-id={repositoryId} repository-path={repositoryPath} />
	</div>
</body>
</html>
