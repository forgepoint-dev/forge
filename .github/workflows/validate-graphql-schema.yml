name: Validate GraphQL Schema

on:
  pull_request:
    paths:
      - 'packages/extensions/**'
      - 'server/src/**'

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: DeterminateSystems/determinate-nix-action@main

      - name: Build all extensions
        run: |
          for ext_dir in packages/extensions/*/; do
            if [ -f "$ext_dir/Cargo.toml" ]; then
              echo "Building extension in $ext_dir"
              cd "$ext_dir"
              nix develop --impure -c cargo build --target wasm32-wasip1 --release
              cd - > /dev/null
            fi
          done

      - name: Start server in background
        run: |
          nix develop --impure -c bash -c "
            cd server
            FORGE_IN_MEMORY_DB=true cargo run --bin server &
            SERVER_PID=\$!
            echo \$SERVER_PID > /tmp/server.pid

            # Wait for server to be ready
            for i in {1..30}; do
              if curl -s http://localhost:8000/graphql > /dev/null 2>&1; then
                echo 'Server is ready'
                exit 0
              fi
              echo 'Waiting for server...'
              sleep 1
            done

            echo 'Server failed to start'
            kill \$SERVER_PID 2>/dev/null || true
            exit 1
          "

      - name: Introspect schema
        id: introspect
        run: |
          curl -X POST http://localhost:8000/graphql \
            -H "Content-Type: application/json" \
            -d '{"query":"{ __schema { types { name kind fields { name type { name kind } } } queryType { name } mutationType { name } } }"}' \
            -o schema.json

          if [ $? -ne 0 ]; then
            echo "Failed to introspect schema"
            exit 1
          fi

      - name: Validate schema structure
        run: |
          # Check for duplicate type names
          DUPLICATE_TYPES=$(jq -r '.data.__schema.types[].name' schema.json | sort | uniq -d)
          if [ -n "$DUPLICATE_TYPES" ]; then
            echo "::error::Duplicate type names found in schema: $DUPLICATE_TYPES"
            exit 1
          fi

          # Check for Query type
          QUERY_TYPE=$(jq -r '.data.__schema.queryType.name' schema.json)
          if [ "$QUERY_TYPE" != "Query" ]; then
            echo "::error::Query type not found or invalid"
            exit 1
          fi

          # Check for Mutation type
          MUTATION_TYPE=$(jq -r '.data.__schema.mutationType.name' schema.json)
          if [ "$MUTATION_TYPE" != "Mutation" ]; then
            echo "::warning::Mutation type not found (this may be intentional)"
          fi

          echo "✅ Schema validation passed"

      - name: Check for naming conflicts
        run: |
          # Extract all field names from extensions
          EXTENSION_FIELDS=$(jq -r '
            .data.__schema.types[] |
            select(.name == "Query" or .name == "Mutation") |
            .fields[]? | .name
          ' schema.json | sort)

          # Check for common naming patterns that might conflict
          POTENTIAL_CONFLICTS=$(echo "$EXTENSION_FIELDS" | grep -E '^(get|list|create|update|delete)[A-Z]' || true)

          if [ -n "$POTENTIAL_CONFLICTS" ]; then
            echo "### ⚠️ Potential Naming Conflicts" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The following fields follow common naming patterns:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$POTENTIAL_CONFLICTS" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Ensure these don't conflict with other extensions or core schema." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Generate schema documentation
        run: |
          echo "### 📋 GraphQL Schema Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count types
          TOTAL_TYPES=$(jq '[.data.__schema.types[] | select(.name | startswith("__") | not)] | length' schema.json)
          echo "**Total Types:** $TOTAL_TYPES" >> $GITHUB_STEP_SUMMARY

          # Count queries
          TOTAL_QUERIES=$(jq '[.data.__schema.types[] | select(.name == "Query") | .fields[]?] | length' schema.json)
          echo "**Total Queries:** $TOTAL_QUERIES" >> $GITHUB_STEP_SUMMARY

          # Count mutations
          TOTAL_MUTATIONS=$(jq '[.data.__schema.types[] | select(.name == "Mutation") | .fields[]?] | length' schema.json)
          echo "**Total Mutations:** $TOTAL_MUTATIONS" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Query Fields" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          jq -r '.data.__schema.types[] | select(.name == "Query") | .fields[]? | "- \(.name): \(.type.name // .type.ofType.name)"' schema.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          if [ "$TOTAL_MUTATIONS" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### Mutation Fields" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            jq -r '.data.__schema.types[] | select(.name == "Mutation") | .fields[]? | "- \(.name): \(.type.name // .type.ofType.name)"' schema.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload schema artifact
        uses: actions/upload-artifact@v4
        with:
          name: graphql-schema
          path: schema.json
          retention-days: 7

      - name: Stop server
        if: always()
        run: |
          if [ -f /tmp/server.pid ]; then
            kill $(cat /tmp/server.pid) 2>/dev/null || true
          fi
