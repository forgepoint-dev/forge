name: Build Extensions

on:
  push:
    branches: [main]
    paths:
      - 'packages/extensions/**'
      - 'packages/wit/**'
      - '.github/workflows/build-extensions.yml'
  pull_request:
    paths:
      - 'packages/extensions/**'
      - 'packages/wit/**'
      - '.github/workflows/build-extensions.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        extension:
          - issues

    steps:
      - uses: actions/checkout@v4

      - uses: DeterminateSystems/determinate-nix-action@main

      - name: Build ${{ matrix.extension }} extension
        working-directory: packages/extensions/${{ matrix.extension }}
        run: |
          nix develop --impure -c cargo build --target wasm32-wasip1 --release

      - name: Run tests
        working-directory: packages/extensions/${{ matrix.extension }}
        run: |
          nix develop --impure -c cargo test

      - name: Check formatting
        working-directory: packages/extensions/${{ matrix.extension }}
        run: |
          nix develop --impure -c cargo fmt --check

      - name: Run clippy
        working-directory: packages/extensions/${{ matrix.extension }}
        run: |
          nix develop --impure -c cargo clippy -- -D warnings

      - name: Upload WASM artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.extension }}-extension
          path: packages/extensions/${{ matrix.extension }}/target/wasm32-wasip1/release/*.wasm
          retention-days: 7

  publish-oci:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        extension:
          - issues

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Download WASM artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.extension }}-extension
          path: ./artifacts

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        working-directory: packages/extensions/${{ matrix.extension }}
        run: |
          VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build OCI image
        run: |
          cat > Dockerfile <<EOF
          FROM scratch
          COPY ./artifacts/*.wasm /extension.wasm
          EOF
          docker buildx build \
            --platform wasi/wasm \
            --provenance=false \
            --tag ghcr.io/${{ github.repository_owner }}/extensions/${{ matrix.extension }}:${{ steps.version.outputs.version }} \
            --tag ghcr.io/${{ github.repository_owner }}/extensions/${{ matrix.extension }}:latest \
            --push \
            .

      - name: Generate build summary
        run: |
          echo "### ðŸš€ Published Extension" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Extension:** ${{ matrix.extension }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ghcr.io/${{ github.repository_owner }}/extensions/${{ matrix.extension }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Usage" >> $GITHUB_STEP_SUMMARY
          echo '```ron' >> $GITHUB_STEP_SUMMARY
          echo 'Config(' >> $GITHUB_STEP_SUMMARY
          echo '    extensions: Extensions(' >> $GITHUB_STEP_SUMMARY
          echo '        oci: [' >> $GITHUB_STEP_SUMMARY
          echo '            OciExtension(' >> $GITHUB_STEP_SUMMARY
          echo '                name: "${{ matrix.extension }}",' >> $GITHUB_STEP_SUMMARY
          echo '                registry: "ghcr.io",' >> $GITHUB_STEP_SUMMARY
          echo '                image: "${{ github.repository_owner }}/extensions/${{ matrix.extension }}",' >> $GITHUB_STEP_SUMMARY
          echo '                reference: Tag("${{ steps.version.outputs.version }}"),' >> $GITHUB_STEP_SUMMARY
          echo '            ),' >> $GITHUB_STEP_SUMMARY
          echo '        ],' >> $GITHUB_STEP_SUMMARY
          echo '    ),' >> $GITHUB_STEP_SUMMARY
          echo ')' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
