---
const env = import.meta.env as Record<string, string | undefined>;
const override = env.PUBLIC_FORGE_AUTH_LOGIN_URL;

function computeTarget(): string {
  if (override) return override;
  const graphqlEndpoint = env.PUBLIC_FORGE_GRAPHQL_URL ?? 'http://localhost:8000/graphql';
  let base = graphqlEndpoint.replace(/\/graphql$/, '');
  try {
    const u = new URL(base);
    if (u.hostname === 'localhost') {
      u.hostname = '127.0.0.1';
      base = u.toString().replace(/\/$/, '');
    }
  } catch {}
  const sanitizedBase = base.endsWith('/') ? base.slice(0, -1) : base;
  return `${sanitizedBase}/auth/login`;
}

function canonicalize(url: string): string {
  try {
    const u = new URL(url);
    if (u.hostname === 'localhost') {
      u.hostname = '127.0.0.1';
    }
    return u.toString();
  } catch {
    return url;
  }
}

const target = `${computeTarget()}?return_to=${encodeURIComponent(canonicalize(Astro.url.origin + '/'))}`;

return Astro.redirect(target);
---

<html>
  <head>
    <meta http-equiv="refresh" content={`0; url=${target}`} />
  </head>
  <body>
    <p>Redirecting to <a href={target}>{target}</a>â€¦</p>
  </body>
</html>
