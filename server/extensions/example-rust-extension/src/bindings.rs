// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod forge {
    pub mod extension {
        /// Logging interface provided by the host
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod host_log {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum LogLevel {
                Trace,
                Debug,
                Info,
                Warn,
                Error,
            }
            impl ::core::fmt::Debug for LogLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        LogLevel::Trace => f.debug_tuple("LogLevel::Trace").finish(),
                        LogLevel::Debug => f.debug_tuple("LogLevel::Debug").finish(),
                        LogLevel::Info => f.debug_tuple("LogLevel::Info").finish(),
                        LogLevel::Warn => f.debug_tuple("LogLevel::Warn").finish(),
                        LogLevel::Error => f.debug_tuple("LogLevel::Error").finish(),
                    }
                }
            }
            impl LogLevel {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> LogLevel {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => LogLevel::Trace,
                        1 => LogLevel::Debug,
                        2 => LogLevel::Info,
                        3 => LogLevel::Warn,
                        4 => LogLevel::Error,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Log a message at the specified level
            pub fn log(level: LogLevel, message: &str) -> () {
                unsafe {
                    let vec0 = message;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "forge:extension/host-log@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "log"]
                        fn wit_import1(_: i32, _: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32, _: *mut u8, _: usize) {
                        unreachable!()
                    }
                    unsafe { wit_import1(level.clone() as i32, ptr0.cast_mut(), len0) };
                }
            }
        }
        /// Database interface provided by the host
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod host_database {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ExecInfo {
                pub rows_affected: u64,
                pub last_insert_id: Option<u64>,
            }
            impl ::core::fmt::Debug for ExecInfo {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExecInfo")
                        .field("rows-affected", &self.rows_affected)
                        .field("last-insert-id", &self.last_insert_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum ExecResult {
                Success(ExecInfo),
                Error(_rt::String),
            }
            impl ::core::fmt::Debug for ExecResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ExecResult::Success(e) => {
                            f.debug_tuple("ExecResult::Success").field(e).finish()
                        }
                        ExecResult::Error(e) => {
                            f.debug_tuple("ExecResult::Error").field(e).finish()
                        }
                    }
                }
            }
            /// Record value can be various types
            #[derive(Clone)]
            pub enum RecordValue {
                Null,
                Boolean(bool),
                Integer(i64),
                Float(f64),
                Text(_rt::String),
                Blob(_rt::Vec<u8>),
            }
            impl ::core::fmt::Debug for RecordValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RecordValue::Null => f.debug_tuple("RecordValue::Null").finish(),
                        RecordValue::Boolean(e) => {
                            f.debug_tuple("RecordValue::Boolean").field(e).finish()
                        }
                        RecordValue::Integer(e) => {
                            f.debug_tuple("RecordValue::Integer").field(e).finish()
                        }
                        RecordValue::Float(e) => {
                            f.debug_tuple("RecordValue::Float").field(e).finish()
                        }
                        RecordValue::Text(e) => {
                            f.debug_tuple("RecordValue::Text").field(e).finish()
                        }
                        RecordValue::Blob(e) => {
                            f.debug_tuple("RecordValue::Blob").field(e).finish()
                        }
                    }
                }
            }
            /// Result types for database operations
            #[derive(Clone)]
            pub enum QueryResult {
                Success(_rt::Vec<RecordValue>),
                Error(_rt::String),
            }
            impl ::core::fmt::Debug for QueryResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        QueryResult::Success(e) => {
                            f.debug_tuple("QueryResult::Success").field(e).finish()
                        }
                        QueryResult::Error(e) => {
                            f.debug_tuple("QueryResult::Error").field(e).finish()
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Execute a query that returns results
            pub fn query(sql: &str, params: &[RecordValue]) -> QueryResult {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = sql;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec3 = params;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3
                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                        {
                            match e {
                                RecordValue::Null => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                }
                                RecordValue::Boolean(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    *base.add(8).cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                RecordValue::Integer(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                RecordValue::Float(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                }
                                RecordValue::Text(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let vec1 = e;
                                    let ptr1 = vec1.as_ptr().cast::<u8>();
                                    let len1 = vec1.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len1;
                                    *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                }
                                RecordValue::Blob(e) => {
                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                    let vec2 = e;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                            }
                        }
                    }
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "forge:extension/host-database@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "query"]
                        fn wit_import5(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import5(ptr0.cast_mut(), len0, result3, len3, ptr4) };
                    let l6 = i32::from(*ptr4.add(0).cast::<u8>());
                    let v24 = match l6 {
                        0 => {
                            let e24 = {
                                let l7 = *ptr4
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l8 = *ptr4
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base20 = l7;
                                let len20 = l8;
                                let mut result20 = _rt::Vec::with_capacity(len20);
                                for i in 0..len20 {
                                    let base = base20
                                        .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                    let e20 = {
                                        let l9 = i32::from(*base.add(0).cast::<u8>());
                                        let v19 = match l9 {
                                            0 => RecordValue::Null,
                                            1 => {
                                                let e19 = {
                                                    let l10 = i32::from(*base.add(8).cast::<u8>());
                                                    _rt::bool_lift(l10 as u8)
                                                };
                                                RecordValue::Boolean(e19)
                                            }
                                            2 => {
                                                let e19 = {
                                                    let l11 = *base.add(8).cast::<i64>();
                                                    l11
                                                };
                                                RecordValue::Integer(e19)
                                            }
                                            3 => {
                                                let e19 = {
                                                    let l12 = *base.add(8).cast::<f64>();
                                                    l12
                                                };
                                                RecordValue::Float(e19)
                                            }
                                            4 => {
                                                let e19 = {
                                                    let l13 = *base.add(8).cast::<*mut u8>();
                                                    let l14 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len15 = l14;
                                                    let bytes15 = _rt::Vec::from_raw_parts(
                                                        l13.cast(),
                                                        len15,
                                                        len15,
                                                    );
                                                    _rt::string_lift(bytes15)
                                                };
                                                RecordValue::Text(e19)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 5, "invalid enum discriminant");
                                                let e19 = {
                                                    let l16 = *base.add(8).cast::<*mut u8>();
                                                    let l17 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len18 = l17;
                                                    _rt::Vec::from_raw_parts(l16.cast(), len18, len18)
                                                };
                                                RecordValue::Blob(e19)
                                            }
                                        };
                                        v19
                                    };
                                    result20.push(e20);
                                }
                                _rt::cabi_dealloc(
                                    base20,
                                    len20 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                result20
                            };
                            QueryResult::Success(e24)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e24 = {
                                let l21 = *ptr4
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l22 = *ptr4
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len23 = l22;
                                let bytes23 = _rt::Vec::from_raw_parts(
                                    l21.cast(),
                                    len23,
                                    len23,
                                );
                                _rt::string_lift(bytes23)
                            };
                            QueryResult::Error(e24)
                        }
                    };
                    let result25 = v24;
                    if layout3.size() != 0 {
                        _rt::alloc::dealloc(result3.cast(), layout3);
                    }
                    result25
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Execute a statement that doesn't return results
            pub fn execute(sql: &str, params: &[RecordValue]) -> ExecResult {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 32]);
                    let vec0 = sql;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec3 = params;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3
                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                        {
                            match e {
                                RecordValue::Null => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                }
                                RecordValue::Boolean(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    *base.add(8).cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                RecordValue::Integer(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                RecordValue::Float(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                }
                                RecordValue::Text(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let vec1 = e;
                                    let ptr1 = vec1.as_ptr().cast::<u8>();
                                    let len1 = vec1.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len1;
                                    *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                }
                                RecordValue::Blob(e) => {
                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                    let vec2 = e;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                            }
                        }
                    }
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "forge:extension/host-database@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "execute"]
                        fn wit_import5(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import5(ptr0.cast_mut(), len0, result3, len3, ptr4) };
                    let l6 = i32::from(*ptr4.add(0).cast::<u8>());
                    let v13 = match l6 {
                        0 => {
                            let e13 = {
                                let l7 = *ptr4.add(8).cast::<i64>();
                                let l8 = i32::from(*ptr4.add(16).cast::<u8>());
                                ExecInfo {
                                    rows_affected: l7 as u64,
                                    last_insert_id: match l8 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l9 = *ptr4.add(24).cast::<i64>();
                                                l9 as u64
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            ExecResult::Success(e13)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e13 = {
                                let l10 = *ptr4.add(8).cast::<*mut u8>();
                                let l11 = *ptr4
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len12 = l11;
                                let bytes12 = _rt::Vec::from_raw_parts(
                                    l10.cast(),
                                    len12,
                                    len12,
                                );
                                _rt::string_lift(bytes12)
                            };
                            ExecResult::Error(e13)
                        }
                    };
                    let result14 = v13;
                    if layout3.size() != 0 {
                        _rt::alloc::dealloc(result3.cast(), layout3);
                    }
                    result14
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Run migrations (SQL statements separated by semicolons)
            pub fn migrate(migrations: &str) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = migrations;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "forge:extension/host-database@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "migrate"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result7 = match l3 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = *ptr1
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l5 = *ptr1
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                _rt::string_lift(bytes6)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result7
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod forge {
        pub mod extension {
            /// The main API that extensions must implement
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod extension_api {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// Configuration passed to the extension
                #[derive(Clone)]
                pub struct Config {
                    pub name: _rt::String,
                    pub version: _rt::String,
                    pub database_path: _rt::String,
                    pub custom_config: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for Config {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Config")
                            .field("name", &self.name)
                            .field("version", &self.version)
                            .field("database-path", &self.database_path)
                            .field("custom-config", &self.custom_config)
                            .finish()
                    }
                }
                /// GraphQL field resolution
                #[derive(Clone)]
                pub struct ResolveInfo {
                    pub field_name: _rt::String,
                    pub parent_type: _rt::String,
                    pub arguments: _rt::String,
                    /// JSON string
                    pub context: _rt::String,
                    /// JSON string with request context
                    pub parent: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for ResolveInfo {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ResolveInfo")
                            .field("field-name", &self.field_name)
                            .field("parent-type", &self.parent_type)
                            .field("arguments", &self.arguments)
                            .field("context", &self.context)
                            .field("parent", &self.parent)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum ResolveResult {
                    Success(_rt::String),
                    /// JSON string
                    Error(_rt::String),
                }
                impl ::core::fmt::Debug for ResolveResult {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            ResolveResult::Success(e) => {
                                f.debug_tuple("ResolveResult::Success").field(e).finish()
                            }
                            ResolveResult::Error(e) => {
                                f.debug_tuple("ResolveResult::Error").field(e).finish()
                            }
                        }
                    }
                }
                /// Extension information
                #[derive(Clone)]
                pub struct ExtensionInfo {
                    pub name: _rt::String,
                    pub version: _rt::String,
                    pub capabilities: _rt::Vec<_rt::String>,
                }
                impl ::core::fmt::Debug for ExtensionInfo {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ExtensionInfo")
                            .field("name", &self.name)
                            .field("version", &self.version)
                            .field("capabilities", &self.capabilities)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_init_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: *mut u8,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let len2 = arg5;
                    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
                    let result4 = T::init(Config {
                        name: _rt::string_lift(bytes0),
                        version: _rt::string_lift(bytes1),
                        database_path: _rt::string_lift(bytes2),
                        custom_config: match arg6 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len3 = arg8;
                                    let bytes3 = _rt::Vec::from_raw_parts(
                                        arg7.cast(),
                                        len3,
                                        len3,
                                    );
                                    _rt::string_lift(bytes3)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    let ptr5 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result4 {
                        Ok(_) => {
                            *ptr5.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr5.add(0).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr5
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr5
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr5
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_init<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_info_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_info();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let ExtensionInfo {
                        name: name2,
                        version: version2,
                        capabilities: capabilities2,
                    } = result0;
                    let vec3 = (name2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                    let vec4 = (version2.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    ::core::mem::forget(vec4);
                    *ptr1.add(3 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
                    *ptr1
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr4.cast_mut();
                    let vec6 = capabilities2;
                    let len6 = vec6.len();
                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec6.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result6 = if layout6.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout6);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec6.into_iter().enumerate() {
                        let base = result6
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec5 = (e.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    }
                    *ptr1.add(5 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len6;
                    *ptr1
                        .add(4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = result6;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_info<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                    let l2 = *arg0
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l3 = *arg0
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l2, l3, 1);
                    let l4 = *arg0
                        .add(4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l5 = *arg0
                        .add(5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base8 = l4;
                    let len8 = l5;
                    for i in 0..len8 {
                        let base = base8
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l6 = *base.add(0).cast::<*mut u8>();
                            let l7 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l6, l7, 1);
                        }
                    }
                    _rt::cabi_dealloc(
                        base8,
                        len8 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_schema_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_schema();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_schema<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_resolve_field_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: *mut u8,
                    arg7: usize,
                    arg8: i32,
                    arg9: *mut u8,
                    arg10: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let len2 = arg5;
                    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
                    let len3 = arg7;
                    let bytes3 = _rt::Vec::from_raw_parts(arg6.cast(), len3, len3);
                    let result5 = T::resolve_field(ResolveInfo {
                        field_name: _rt::string_lift(bytes0),
                        parent_type: _rt::string_lift(bytes1),
                        arguments: _rt::string_lift(bytes2),
                        context: _rt::string_lift(bytes3),
                        parent: match arg8 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len4 = arg10;
                                    let bytes4 = _rt::Vec::from_raw_parts(
                                        arg9.cast(),
                                        len4,
                                        len4,
                                    );
                                    _rt::string_lift(bytes4)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    let ptr6 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result5 {
                        ResolveResult::Success(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr6
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *ptr6
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr7.cast_mut();
                        }
                        ResolveResult::Error(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec8 = (e.into_bytes()).into_boxed_slice();
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            ::core::mem::forget(vec8);
                            *ptr6
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len8;
                            *ptr6
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr8.cast_mut();
                        }
                    }
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_resolve_field<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_shutdown_cabi<T: Guest>() {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::shutdown();
                }
                pub trait Guest {
                    /// Initialize the extension
                    fn init(config: Config) -> Result<(), _rt::String>;
                    /// Get extension information
                    fn get_info() -> ExtensionInfo;
                    /// Get the GraphQL schema fragment (SDL format)
                    fn get_schema() -> _rt::String;
                    /// Resolve a GraphQL field
                    fn resolve_field(info: ResolveInfo) -> ResolveResult;
                    /// Clean shutdown
                    fn shutdown() -> ();
                }
                #[doc(hidden)]
                macro_rules! __export_forge_extension_extension_api_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "forge:extension/extension-api@0.1.0#init")] unsafe extern "C" fn
                        export_init(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8, arg3
                        : usize, arg4 : * mut u8, arg5 : usize, arg6 : i32, arg7 : * mut
                        u8, arg8 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_init_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4, arg5,
                        arg6, arg7, arg8) } } #[unsafe (export_name =
                        "cabi_post_forge:extension/extension-api@0.1.0#init")] unsafe
                        extern "C" fn _post_return_init(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_init::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "forge:extension/extension-api@0.1.0#get-info")] unsafe extern
                        "C" fn export_get_info() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_get_info_cabi::<$ty > () } }
                        #[unsafe (export_name =
                        "cabi_post_forge:extension/extension-api@0.1.0#get-info")] unsafe
                        extern "C" fn _post_return_get_info(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_get_info::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "forge:extension/extension-api@0.1.0#get-schema")] unsafe extern
                        "C" fn export_get_schema() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_get_schema_cabi::<$ty > () } }
                        #[unsafe (export_name =
                        "cabi_post_forge:extension/extension-api@0.1.0#get-schema")]
                        unsafe extern "C" fn _post_return_get_schema(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_get_schema::<$ty >
                        (arg0) } } #[unsafe (export_name =
                        "forge:extension/extension-api@0.1.0#resolve-field")] unsafe
                        extern "C" fn export_resolve_field(arg0 : * mut u8, arg1 : usize,
                        arg2 : * mut u8, arg3 : usize, arg4 : * mut u8, arg5 : usize,
                        arg6 : * mut u8, arg7 : usize, arg8 : i32, arg9 : * mut u8, arg10
                        : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_resolve_field_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4,
                        arg5, arg6, arg7, arg8, arg9, arg10) } } #[unsafe (export_name =
                        "cabi_post_forge:extension/extension-api@0.1.0#resolve-field")]
                        unsafe extern "C" fn _post_return_resolve_field(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*:: __post_return_resolve_field::<$ty
                        > (arg0) } } #[unsafe (export_name =
                        "forge:extension/extension-api@0.1.0#shutdown")] unsafe extern
                        "C" fn export_shutdown() { unsafe { $($path_to_types)*::
                        _export_shutdown_cabi::<$ty > () } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_forge_extension_extension_api_0_1_0_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 6 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 6
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_extension_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::forge::extension::extension_api::__export_forge_extension_extension_api_0_1_0_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::forge::extension::extension_api);
    };
}
#[doc(inline)]
pub(crate) use __export_extension_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:forge:extension@0.1.0:extension:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1022] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xfe\x06\x01A\x02\x01\
A\x06\x01B\x04\x01m\x05\x05trace\x05debug\x04info\x04warn\x05error\x04\0\x09log-\
level\x03\0\0\x01@\x02\x05level\x01\x07messages\x01\0\x04\0\x03log\x01\x02\x03\0\
\x1eforge:extension/host-log@0.1.0\x05\0\x01B\x12\x01kw\x01r\x02\x0drows-affecte\
dw\x0elast-insert-id\0\x04\0\x09exec-info\x03\0\x01\x01q\x02\x07success\x01\x02\0\
\x05error\x01s\0\x04\0\x0bexec-result\x03\0\x03\x01p}\x01q\x06\x04null\0\0\x07bo\
olean\x01\x7f\0\x07integer\x01x\0\x05float\x01u\0\x04text\x01s\0\x04blob\x01\x05\
\0\x04\0\x0crecord-value\x03\0\x06\x01p\x07\x01q\x02\x07success\x01\x08\0\x05err\
or\x01s\0\x04\0\x0cquery-result\x03\0\x09\x01@\x02\x03sqls\x06params\x08\0\x0a\x04\
\0\x05query\x01\x0b\x01@\x02\x03sqls\x06params\x08\0\x04\x04\0\x07execute\x01\x0c\
\x01j\0\x01s\x01@\x01\x0amigrationss\0\x0d\x04\0\x07migrate\x01\x0e\x03\0#forge:\
extension/host-database@0.1.0\x05\x01\x01B\x15\x01ks\x01r\x04\x04names\x07versio\
ns\x0ddatabase-paths\x0dcustom-config\0\x04\0\x06config\x03\0\x01\x01r\x05\x0afi\
eld-names\x0bparent-types\x09argumentss\x07contexts\x06parent\0\x04\0\x0cresolve\
-info\x03\0\x03\x01q\x02\x07success\x01s\0\x05error\x01s\0\x04\0\x0eresolve-resu\
lt\x03\0\x05\x01ps\x01r\x03\x04names\x07versions\x0ccapabilities\x07\x04\0\x0eex\
tension-info\x03\0\x08\x01j\0\x01s\x01@\x01\x06config\x02\0\x0a\x04\0\x04init\x01\
\x0b\x01@\0\0\x09\x04\0\x08get-info\x01\x0c\x01@\0\0s\x04\0\x0aget-schema\x01\x0d\
\x01@\x01\x04info\x04\0\x06\x04\0\x0dresolve-field\x01\x0e\x01@\0\x01\0\x04\0\x08\
shutdown\x01\x0f\x04\0#forge:extension/extension-api@0.1.0\x05\x02\x04\0\x1fforg\
e:extension/extension@0.1.0\x04\0\x0b\x0f\x01\0\x09extension\x03\0\0\0G\x09produ\
cers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x06\
0.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
